var searchIndex = {};
searchIndex['generic_array'] = {"items":[[0,"","generic_array","This crate implements a structure that can be used as a generic array type.use\nCore Rust array types `[T; N]` can't be used generically with respect to `N`, so for example this:",null,null],[3,"_0","","Struct representing bit O",null,null],[3,"_1","","Struct representing bit 1",null,null],[3,"GenericArrayImplEven","","Internal type used to generate a struct of appropriate size",null,null],[3,"GenericArrayImplOdd","","Internal type used to generate a struct of appropriate size",null,null],[3,"GenericArray","","Struct representing a generic array - GenericArray<T, N> works like [T; N]",null,null],[8,"Nat","","Nonnegative type-level integer, e.g., `((_1,_0),_1) = 0b101 = 5`.\nCopied from shoggoth.rs",null,null],[10,"reify","","",0,{"inputs":[{"name":"nat"}],"output":{"name":"u64"}}],[8,"ArrayLength","","Trait making GenericArray work, marking types to be used as length of an array",null,null],[16,"ArrayType","","Associated type representing the array type for the number",1,null],[11,"clone","","",2,{"inputs":[{"name":"_0"}],"output":{"name":"_0"}}],[11,"fmt","","",2,{"inputs":[{"name":"_0"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"_1"}],"output":{"name":"_1"}}],[11,"fmt","","",3,{"inputs":[{"name":"_1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reify","","",2,{"inputs":[{"name":"_0"}],"output":{"name":"u64"}}],[11,"reify","","",3,{"inputs":[{"name":"_1"}],"output":{"name":"u64"}}],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"new","","Function constructing an array filled with default values",4,{"inputs":[{"name":"genericarray"}],"output":{"name":"genericarray"}}],[11,"from_slice","","Function constructing an array from a slice; the length of the slice must be equal to the length of the array",4,null]],"paths":[[8,"Nat"],[8,"ArrayLength"],[3,"_0"],[3,"_1"],[3,"GenericArray"]]};
initSearch(searchIndex);
